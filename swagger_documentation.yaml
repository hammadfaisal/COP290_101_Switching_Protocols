openapi: 3.0.3
info:
  title: "Mosaic API"
  description:
    "Mosaic will be a social media platform designed for individuals to engage in discussions and share content in a community-driven environment. Similar to Reddit, Mosaic will allow users to create and join communities that are focused on specific topics of interest. As the name suggests, our aim is to bring together a diverse community made up of different pieces that come together to create a beautiful and meaningful whole."
    
  termsOfService: http://link_to_mosaic/terms/
  contact:
    email: apiteam@mosaic.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: '1.0'
externalDocs:
  description: Find out more about Mosaic
  url: http://link_to_mosaic.com
servers:
  - url: https://link_to_mosaic/
tags:
  - name: me
    description: Operations about self
  - name: communities
    description: Operations about Communities
  - name: posts
    description: Operations about Posts
  - name: user
    description: Operations about User
  - name: comments
    description: Operations about Comments

paths:
  /me/password:
    post:
      tags:
        - me
      summary: change password
      description: ''
      operationId: change_password
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              required:
                - old_password
                - new_password
              type: object
              properties:
                old_password:
                  type: string
                new_password:
                  type: string
                  
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                example: "OK"
  /me/pic:
    post:
      tags:
        - me
      summary: set profile pic
      description: ''
      operationId: upload_dp
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                example: "OK"
  /me/feed:
    get:
      tags:
        - me
      summary: get feed
      description: ''
      operationId: get_me_feed
      security:
        - user_auth:
          - login:user
      responses:
        '200':
          description: successful operation
          content:
           application/json:
             schema:
               type: array
               items:
                $ref: '#/components/schemas/Posts'
                 
  /me/update:
    post:
      tags:
        - me
      summary: update user info
      description: ''
      operationId: update_me
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
                 required:
                  - username
                  - password
                  - email
                 type: object
                 properties:
                   password:
                      type: string
                   username:
                      type: string
                   email:
                      type: string
                   display_pic:
                      type: string
                   bio:
                      type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                example: "OK"
        '400':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                example: "user not found"
  /me/info:
    get:
      tags:
        - me
      summary: Get info of user
      description: ''
      operationId: get_me
      security:
        - user_auth:
          - login:user
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /me/communities:
    get:
      tags:
        - me
      summary: Get subscribed communities
      description: ''
      operationId: get_me_communities
      security:
        - user_auth:
          - login:user
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Communities'

  /c/create:
    post:
      tags:
        - communities
      summary: Create community
      description: This can only be done by the logged in user.
      operationId: createCommunity
      requestBody:
        description: Created community object
        content:
          application/json:
            schema:
                 required:
                  - name
                  - description
                 type: object
                 properties:
                   name:
                      type: string
                   display_pic:
                      type: string
                   description:
                      type: string
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                example: "OK"
  /c/get:
    get:
      tags:
        - communities
      summary: Get all communities
      description: ''
      operationId: get_communities
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                example: "OK"
  /c/joined:
    get:
      tags:
        - communities
      summary: Get subscribed communities
      description: ''
      operationId: get_joined_communities
      security:
        - user_auth:
          - login:user
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Communities'
  /c/get/{community_name}:
    get:
      tags:
        - communities
      summary: Get community by name
      description: ''
      operationId: getCommunityByName
      parameters:
        - $ref: '#/components/parameters/community_name'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Communities'          
        '400':
          description: Invalid community name supplied
        '404':
          description: Community not found
  /c/info/{communityID}:
    get:
      tags:
        - communities
      summary: Get community by id
      description: ''
      operationId: get_community_info
      parameters:
        - $ref: '#/components/parameters/communityID'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Communities'          
        '400':
          description: Invalid community name supplied
        '404':
          description: Community not found
  
  /c/join:
    post:
      tags:
        - communities
      summary: join community
      description: This can only be done by the logged in user.
      operationId: join_community
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
                 required:
                  - id
                 type: object
                 properties:
                   id:
                     type: integer
                     format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                example: "OK"
        '404':
          description: Community not found
  /c/leave:
    post:
      tags:
        - communities
      summary: leave community
      description: This can only be done by the logged in user.
      operationId: leave_community
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
                 required:
                  - id
                 type: object
                 properties:
                   id:
                     type: integer
                     format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                example: "OK"
        '404':
          description: Community not found
  /c/update:
    post:
      tags:
        - communities
      summary: update community
      description: This can only be done by the logged in user.
      operationId: update_community
      requestBody:
        description: ''
        content:
          application/json:
            schema:
                 required:
                  - id
                 type: object
                 properties:
                   id:
                     type: integer
                     format: int64
                   name:
                      type: string
                   description:
                      type: string
                   display_pic: 
                      type: string
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                example: "OK"
  /c/{communityID}/posts/{page_num}:
    get:
      tags:
        - communities
      summary: Get community post by id 
      description: ''
      operationId: get_community_posts
      parameters:
        - $ref: '#/components/parameters/communityID'
        - $ref: '#/components/parameters/page_num'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                properties:
                  pages:
                    type: integer
                    format: int64
                  post:
                    $ref: '#/components/schemas/Posts'
        '400':
          description: Invalid community name supplied
        '404':
          description: Community not found
  
  /p/create:
    post:
      tags:
        - posts
      summary: Create Post
      description: This can only be done by the logged in user.
      operationId: createPost
      requestBody:
        description: Created posted object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Posts'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/parameters/postID'
  /p/{postID}:
    get:
      tags:
        - posts
      summary: Get post by id
      description: ''
      operationId: getPostByID
      parameters:
        - $ref: '#/components/parameters/postID'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Posts'
        '400':
          description: Invalid post id supplied
        '404':
          description: Post not found
    
  /p/{postID}/comments:
    get:
      tags:
        - posts
      summary: Get post comments by id
      description: ''
      operationId: get_post_comments
      parameters:
        - $ref: '#/components/parameters/postID'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comments'
        '400':
          description: Invalid post id supplied
        '404':
          description: Post not found
  /p/update:
    post:
      tags:
        - posts
      summary:  update_post
      description: This can only be done by the logged in user.
      operationId: update_post
      security:
        - user_auth:
          - login:user
      requestBody:
        description: Created posted object
        required: true
        content:
          application/json:
            schema:
              required:
                  - id
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                name:
                  type: string
                description:
                  type: string
                display_pic: 
                      type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                example: "OK"
  /p/{postID}/upvotes:
   post:
      tags:
        - posts
      summary: upvote post
      description: This can only be done by the logged in user.
      operationId: upvote_post
      parameters:
        - $ref: '#/components/parameters/postID'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                example: "OK"
  /p/{postID}/downvotes:
   post:
      tags:
        - posts
      summary: upvote post
      description: This can only be done by the logged in user.
      operationId: downvote_post
      parameters:
        - $ref: '#/components/parameters/postID'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                example: "OK"
  /p/{postID}/vote:
   get:
      tags:
        - posts
      summary: Get post votes by id
      description: ''
      operationId: get_post_vote
      parameters:
        - $ref: '#/components/parameters/postID'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Votes'
        '400':
          description: Invalid post id supplied
        '404':
          description: Post not found
  /p/{postID}/delete:
    delete:
      tags:
        - posts
      summary: Delete post
      description: This can only be done by the logged in user who created the post or the one who is either a moderator or admin of the community.
      operationId: deletePost
      security:
        - user_auth:
          - read:user
          - write:user
      parameters:
        - $ref: '#/components/parameters/postID'
      responses:
        '400':
          description: Invalid post id supplied
        '404':
          description: Post not found
  
  
 
  
  /u/create:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        required: true
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                example: "OK"
  /u/login:
    post:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      requestBody:
        required: true
        description: Created user object
        content:
          application/json:
            schema:
              required:
                - username
                - password
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /u/{username}/info:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - $ref: '#/components/parameters/username'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /u/{userID}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByID
      parameters:
        - $ref: '#/components/parameters/userID'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /u/{userID}/posts/{page_num}:
    get:
      tags:
        - user
      summary: Get user post by id 
      description: ''
      operationId: get_user_posts
      parameters:
        - $ref: '#/components/parameters/userID'
        - $ref: '#/components/parameters/page_num'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Posts'          
        '400':
          description: Invalid community name supplied
        '404':
          description: Community not found
  /u/{userID}/comments/{page_num}:
    get:
      tags:
        - user
      summary: Get user post by id 
      description: ''
      operationId: get_user_comments
      parameters:
        - $ref: '#/components/parameters/userID'
        - $ref: '#/components/parameters/page_num'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                 $ref: '#/components/schemas/Comments'          
        '400':
          description: Invalid community name supplied
        '404':
          description: user not found
  
  
  
  /cm/create:
    post:
      tags:
        - comments
      summary: Add comment
      description: This can only be done by the logged in user.
      operationId: createComment
      requestBody:
        description: Created coomented object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comments'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                example: "OK"
  /cm/completion:
   post:
      tags:
        - comments
      summary: Add comment
      description: This can only be done by the logged in user.
      operationId: complete_comment
      requestBody:
        description: Created coomented object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comments'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  completion:
                    type: string
                  
  /cm/{commentID}/info:
    get:
      tags:
        - comments
      summary: Get comment by comment id
      description: ''
      operationId: getCommentByID
      parameters:
        - name: commentID
          in: path
          required: true
          schema: 
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comments'          
        '400':
          description: Invalid comment ID supplied
        '404':
          description: Comment not found
  /cm/{commentID}/replies:
    get:
      tags:
        - comments
      summary: Get comment by comment id
      description: ''
      operationId: get_comment_replies
      parameters:
        - name: commentID
          in: path
          required: true
          schema: 
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comments'          
        '400':
          description: Invalid comment ID supplied
        '404':
          description: Comment not found 
  /cm/{commentID}/parent:
    get:
      tags:
        - comments
      summary: Get comment by comment id
      description: ''
      operationId: getCommentParentByID
      parameters:
        - name: commentID
          in: path
          required: true
          schema: 
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  comment: 
                    $ref: '#/components/schemas/Comments'
                  post:
                    $ref: '#/components/schemas/Posts'
                    
        '400':
          description: Invalid comment ID supplied
        '404':
          description: Comment not found
  /cm/{commentID}/upvote:
    post:
      tags:
        - comments
      summary: Get comment by comment id
      description: ''
      operationId: upvote_comment
      parameters:
        - name: commentID
          in: path
          required: true
          schema: 
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                example: "OK"
                    
        '400':
          description: Invalid comment ID supplied
        '404':
          description: Comment not found
  /cm/{commentID}/downvote:
    post:
      tags:
        - comments
      summary: Get comment by comment id
      description: ''
      operationId: downvote_comment
      parameters:
        - name: commentID
          in: path
          required: true
          schema: 
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                example: "OK"
                    
        '400':
          description: Invalid comment ID supplied
        '404':
          description: Comment not found
  /cm/{commentID}/vote:
    get:
      tags:
        - comments
      summary: Get comment by comment id
      description: ''
      operationId: vote_comment
      parameters:
        - name: commentID
          in: path
          required: true
          schema: 
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Votes'
                    
        '400':
          description: Invalid comment ID supplied
        '404':
          description: Comment not found
  /search:
    get:
      summary: Search for users and communities
      operationId: search
      parameters:
        - name: q
          in: query
          description: The search query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  communities:
                    type: array
                    items:
                      $ref: '#/components/schemas/Communities'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /search-posts:
    get:
      summary: Search for posts
      operationId: search_posts
      parameters:
        - in: query
          name: q
          description: The search query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Posts'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /trending:
    get:
      summary: trending posts
      operationId: trending
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Posts'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /static/{path}:
    get:
      summary: static
      description: ''
      operationId: send_static
      parameters:
        - name: path
          in: path
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
    
  
  
  
  
  
components:
  parameters:
    community_name:
      name: community_name
      in: path
      description: 'The name of the community. Use askMosaic for testing. '
      required: true
      schema:
        type: string
    username:
      name: username
      in: path
      description: 'The name of the user. Use reaper_113 for testing.'
      required: true
      schema:
        type: string
    postID:
      name: postID
      in: path
      description: 'The ID of the post'
      required: true
      schema:
        type: integer
        format: int64
    userID:
      name: userID
      in: path
      description: 'The ID of the user'
      required: true
      schema:
        type: integer
        format: int64
    commentID:
      name: commentID
      in: path
      description: 'The ID of the comment'
      required: true
      schema:
        type: integer
        format: int64
    page_num:
      name: page_num
      in: path
      description: 'page number'
      required: true
      schema:
        type: integer
        format: int64
    communityID:
      name: communityID
      in: path
      description: 'The ID of the community'
      required: true
      schema:
        type: integer
        format: int64
    
  
  schemas:
    Communities:
      required:
        - name
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 123456
        name:
          type: string
          example: askMosaic
        description:
          type: string
          example: A place to ask your questions about this platform!
        timeCreated:
          type: string
          format: date-time
        displayPicture:
          type: string
        createdBy:
          $ref: '#/components/schemas/User'
        noOfSubscribers:
          type: integer
          format: int32
          example: 32
        admin:
          $ref: '#/components/schemas/User'
        isBanned:
          type: boolean
        isDeleted:
          type: boolean
      xml:
        name: communities
    Posts:
      required:
        - title
        - content
        - community
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 123456
        title:
          type: string
          example: Welcome!
        content:
          type: string
          example: Welcome to Mosaic
        createdBy:
          type: integer
        community:
          type: integer
        timeCreated:
          type: string
          format: date-time
        upvotes:
          type: integer
          format: int32
        downvotes:
          type: integer
          format: int32
        views:
          type: integer
          format: int32
        isDeleted:
          type: boolean
      xml:
        name: posts
    User:
      required:
        - username
        - password
      type: object
      properties:
        username:
          type: string
          example: reaper_113
        email:
          type: string
          example: reaper@email.com
        password:
          type: string
          example: 'zxcvbnm'
        display:
          type: string
        content:
          type: string
          example: Welcome to Mosaic
        
      xml:
        name: user
    Votes:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user:
          $ref: '#/components/schemas/User'
        post:
          $ref: '#/components/schemas/Posts'
        voted:
          type: boolean
        time:
          type: string
          format: date-time
      xml:
        name: votes
    Comments:
      required:
        - post
        - content
      type: object
      properties:
        post:
          $ref: '#/components/schemas/Posts'
        id:
          type: integer
          format: int64
        content:
          type: string
          example: I am happy to be here!
        createdBy:
          $ref: '#/components/schemas/User'
        parentComment:
          $ref: '#/components/schemas/Comments'
        timeCreated:
          type: string
          format: date-time
        upvotes:
          type: integer
          format: int32
        downvotes:
          type: integer
          format: int32
      xml:
        name: comments
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  
  securitySchemes:
    user_auth:
      type: oauth2
      flows:
        password:
          tokenUrl: https://link_to_mosaic.com/oauth/authorize
          scopes:
            write:user: modify user details
            read:user: read user details
    api_key:
      type: apiKey
      name: api_key
      in: header